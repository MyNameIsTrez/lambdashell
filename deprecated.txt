
/*
env_write_entry(3)
Serves as a helper function for env_add_entry(3). It will add a new 
user-specified entry to env_global at the specified position.
*/

/*
env_find_key(1)
Searches in env for the provided key. If found, it returns the position
of the key. Else, returns -1.
*/

/*
env_add_entry(2)
Adds an entry to env. It expects that the new entry is provided in 
key-value format. It uses env_find_key(2) to decide where to write the entry
in env. If env_find_key(2) could not find the key in env, it will
tell env_add_entry(3) to add the entry to the end of env. If the key
already exists in env, it will replace its corresponding value with
what is user-specified. It uses env_write_entry(3) for actually writing the 
entry.
*/

/*
init()
- Checks whether the standard input file descriptor refers to a terminal.
- Calls init_env() to initialize our global variable env_global.
- TODO: Shorten by combining all if statements on single line
*/

/*
get_shell_lvl()
-
-
*/

/*
int	get_shell_lvl(char **envp)
{

}
*/



/*
int	get_n_commands(char *line)
{
	int		n_commands;
	int		i;

	n_commands = 0;
	i = 0;
	while (line[i])
	{
		if (((line[i] == '\'') || (line[i] == '"')))
		{
			i++;
			while (line[i] && ((line[i] == '\'') || (line[i] == '"')))
			{
				i++;
			}
		}
		if (line[i] == '|')
			n_commands++;
		i++;
	}
	n_commands++;
	return (n_commands);
}

int init_commands(t_ms *ms, char *line)
{
	ms->commands = ft_calloc(get_n_commands(line), sizeof(t_cmd));
	//printf("n commands: %d\n", get_n_commands(line));
	
	return (0);
}

void	prompt_start(t_ms *ms)
{
	while (1)
	{
		ms->input_line = readline("");
		if (ms->input_line)
		{
			init_commands(ms, ms->input_line);
		}
	}
	printf("exit\n");
	exit(1);
}
*/
